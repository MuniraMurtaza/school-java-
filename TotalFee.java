/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package madarsa;

import java.text.DateFormatSymbols;
import java.util.Calendar;
import java.util.GregorianCalendar;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shabbir
 */
public class TotalFee extends javax.swing.JFrame {

    /**
     * Creates new form TotalFee
     */
    public TotalFee() {
        initComponents();
    }

        private static TotalFee instance = null;
  //creating an instance of the controller of AllStdData
public static TotalFee getInstance() {
      if(instance == null) {
         instance = new TotalFee();
      }
    return instance;
  } 


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        Insert = new javax.swing.JButton();
        print = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        comboMoh = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        totalAmt = new javax.swing.JTextField();
        totPaidAmt = new javax.swing.JTextField();
        totUnpaidAmt = new javax.swing.JTextField();
        totalStdText = new javax.swing.JTextField();
        Close = new javax.swing.JButton();
        comboDar = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        search = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(2147483647, 2147483647));

        jLabel2.setForeground(new java.awt.Color(0, 0, 204));
        jLabel2.setText("TOTAL : ");

        Insert.setForeground(new java.awt.Color(0, 0, 204));
        Insert.setText("INSERT");
        Insert.setEnabled(false);

        print.setForeground(new java.awt.Color(0, 0, 204));
        print.setText("PRINT");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });

        jLabel12.setForeground(new java.awt.Color(0, 0, 204));
        jLabel12.setText("AMOUNT :");

        jLabel7.setForeground(new java.awt.Color(0, 0, 204));
        jLabel7.setText("TOTAL PAID : ");

        jLabel4.setForeground(new java.awt.Color(0, 0, 204));
        jLabel4.setText("STUDENTS :");

        jLabel5.setForeground(new java.awt.Color(0, 0, 204));
        jLabel5.setText("TOTAL : ");

        jSeparator6.setForeground(new java.awt.Color(0, 0, 204));

        jLabel16.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 0, 204));
        jLabel16.setText("STUDENT FEE STATUS");

        comboMoh.setForeground(new java.awt.Color(0, 0, 204));
        comboMoh.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));

        jLabel9.setForeground(new java.awt.Color(0, 0, 204));
        jLabel9.setText("TOTAL UNPAID : ");

        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("SEARCH BY MOHALLA :");

        jScrollPane1.setForeground(new java.awt.Color(0, 0, 204));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        jScrollPane1.setMaximumSize(new java.awt.Dimension(2100000000, 1800));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(2100000000, 1800));

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setFont(new java.awt.Font("Comic Sans MS", 0, 10)); // NOI18N
        jTable1.setForeground(new java.awt.Color(0, 0, 204));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "REG ID", "E-ID", "NAME", "AMOUNT", "JAN", "FEB", "MAR", "APR", "MAY", "JUNE", "JULY", "AUG", "SEP", "OCT", "NOV", "DEC", "AMOUNT", "EXAM-FEE", "MONTH", "TOTAL ", "PAID", "BALANCE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setEnabled(false);
        jTable1.setMaximumSize(new java.awt.Dimension(2000000000, 1800));
        jTable1.setMinimumSize(new java.awt.Dimension(1800, 1800));
        jTable1.setPreferredSize(new java.awt.Dimension(2000000000, 1800));
        jTable1.setRowHeight(25);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getColumn(0).setMinWidth(70);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTable1.getColumnModel().getColumn(0).setMaxWidth(70);
        jTable1.getColumnModel().getColumn(1).setMinWidth(70);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(70);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(70);
        jTable1.getColumnModel().getColumn(2).setMinWidth(120);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(120);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(120);
        jTable1.getColumnModel().getColumn(3).setMinWidth(90);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(90);
        jTable1.getColumnModel().getColumn(3).setMaxWidth(90);
        jTable1.getColumnModel().getColumn(4).setMinWidth(45);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(45);
        jTable1.getColumnModel().getColumn(4).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(5).setMinWidth(45);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(45);
        jTable1.getColumnModel().getColumn(5).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(6).setMinWidth(45);
        jTable1.getColumnModel().getColumn(6).setPreferredWidth(45);
        jTable1.getColumnModel().getColumn(6).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(7).setMinWidth(45);
        jTable1.getColumnModel().getColumn(7).setPreferredWidth(45);
        jTable1.getColumnModel().getColumn(7).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(8).setMinWidth(45);
        jTable1.getColumnModel().getColumn(8).setPreferredWidth(45);
        jTable1.getColumnModel().getColumn(8).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(9).setMinWidth(50);
        jTable1.getColumnModel().getColumn(9).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(9).setMaxWidth(50);
        jTable1.getColumnModel().getColumn(10).setMinWidth(50);
        jTable1.getColumnModel().getColumn(10).setPreferredWidth(50);
        jTable1.getColumnModel().getColumn(10).setMaxWidth(50);
        jTable1.getColumnModel().getColumn(11).setMinWidth(45);
        jTable1.getColumnModel().getColumn(11).setPreferredWidth(45);
        jTable1.getColumnModel().getColumn(11).setMaxWidth(45);
        jTable1.getColumnModel().getColumn(12).setMinWidth(40);
        jTable1.getColumnModel().getColumn(12).setPreferredWidth(40);
        jTable1.getColumnModel().getColumn(12).setMaxWidth(40);
        jTable1.getColumnModel().getColumn(13).setMinWidth(40);
        jTable1.getColumnModel().getColumn(13).setPreferredWidth(40);
        jTable1.getColumnModel().getColumn(13).setMaxWidth(40);
        jTable1.getColumnModel().getColumn(14).setMinWidth(40);
        jTable1.getColumnModel().getColumn(14).setPreferredWidth(40);
        jTable1.getColumnModel().getColumn(14).setMaxWidth(40);
        jTable1.getColumnModel().getColumn(15).setMinWidth(40);
        jTable1.getColumnModel().getColumn(15).setPreferredWidth(40);
        jTable1.getColumnModel().getColumn(15).setMaxWidth(40);
        jTable1.getColumnModel().getColumn(16).setMinWidth(70);
        jTable1.getColumnModel().getColumn(16).setPreferredWidth(70);
        jTable1.getColumnModel().getColumn(16).setMaxWidth(70);
        jTable1.getColumnModel().getColumn(17).setMinWidth(80);
        jTable1.getColumnModel().getColumn(17).setPreferredWidth(80);
        jTable1.getColumnModel().getColumn(17).setMaxWidth(80);
        jTable1.getColumnModel().getColumn(18).setMinWidth(70);
        jTable1.getColumnModel().getColumn(18).setPreferredWidth(70);
        jTable1.getColumnModel().getColumn(18).setMaxWidth(70);
        jTable1.getColumnModel().getColumn(19).setMinWidth(60);
        jTable1.getColumnModel().getColumn(19).setPreferredWidth(60);
        jTable1.getColumnModel().getColumn(19).setMaxWidth(60);
        jTable1.getColumnModel().getColumn(20).setMinWidth(90);
        jTable1.getColumnModel().getColumn(20).setPreferredWidth(90);
        jTable1.getColumnModel().getColumn(20).setMaxWidth(90);
        jTable1.getColumnModel().getColumn(21).setMinWidth(90);
        jTable1.getColumnModel().getColumn(21).setPreferredWidth(90);
        jTable1.getColumnModel().getColumn(21).setMaxWidth(90);

        Close.setForeground(new java.awt.Color(0, 0, 204));
        Close.setText("BACK TO WELCOME PAGE");

        comboDar.setForeground(new java.awt.Color(0, 0, 204));
        comboDar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));

        jLabel3.setForeground(new java.awt.Color(0, 0, 204));
        jLabel3.setText("SEARCH BY DARAJA :");

        search.setForeground(new java.awt.Color(0, 0, 204));
        search.setText("SEARCH");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(print)
                .addGap(7, 7, 7)
                .addComponent(Close)
                .addGap(209, 209, 209)
                .addComponent(jLabel16)
                .addGap(338, 338, 338)
                .addComponent(Insert, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 1080, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(170, 170, 170)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(totalStdText, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(totalAmt, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totPaidAmt, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboMoh, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboDar, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(290, 290, 290)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(totUnpaidAmt, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1390, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Insert, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(print)
                            .addComponent(Close)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalStdText, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(totalAmt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(totPaidAmt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboMoh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(comboDar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totUnpaidAmt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(296, 296, 296)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    protected void setDefault(String[][] str,int totalStd){
String value  = Integer.toString(totalStd);
//setting combo box default values


//value = totalStd.toString();
//searchDar.setText(value);
setCombo1(str[0]);
setCombo2(str[1]);

}
protected void setCombo1(String[] str)
{
int num = 0;
while(num < str.length)
{
comboDar.addItem(str[num]);
num++;
}
}
protected void setCombo2(String[] str)
{
int num = 0;
while(num < str.length)
{
comboMoh.addItem(str[num]);
num++;
}
}
protected  void setTotals(int totalRecords)
{
totalStdText.setText(Integer.toString(totalRecords));

//set total students 3 fields
}


//we will compute the total number of records that are in the database
public void getTotalRecords(){
String regId = ""; 
   
   Object obj = null;
   int num = 0;
   while( jTable1.getValueAt(num,1)!=obj && num<jTable1.getRowCount())
   {    
        num++;
   }
   
   setTotals(num);
   //regId = getRollNum(num);

}
protected String[] getVerification(){


//firstly get the value of daraja and mohalla as it should not be null
comboDarValue[0] = comboDar.getSelectedItem().toString(); 
comboDarValue[1] = comboMoh.getSelectedItem().toString(); 
return comboDarValue;
}
protected String[] getDataVerification(){


//firstly get the value of daraja and mohalla as it should not be null
comboDarValue[0] = "'"+comboDar.getSelectedItem().toString()+"'"; 
comboDarValue[1] = "'"+comboMoh.getSelectedItem().toString()+"'"; 
return comboDarValue;
}
protected void setFormData(){

   Object obj = null;
   int num = 0,value = 0,unPaid = 0,paid = 0;
   while( jTable1.getValueAt(num,1)!=obj && num<jTable1.getRowCount())
   {    
        num++;
   }
   for(int count = 0;count<num;count++)
   {
   value = value+Integer.parseInt( (String)jTable1.getValueAt(count, 19));
   paid = paid+Integer.parseInt( (String)jTable1.getValueAt(count, 20));
  // unPaid = unPaid+Integer.parseInt( (String)jTable1.getValueAt(count, 21));
   }
   totalAmt.setText(Integer.toString(value));
   totPaidAmt.setText(Integer.toString(paid));
totUnpaidAmt.setText(Integer.toString(unPaid));
}


protected void setTableData(String data[][])
{
//set data in the table
int arrayList = 0;
Calendar cal = new GregorianCalendar();
int    yearCalc = cal.get(Calendar.MONTH);

while(data[arrayList]!= null){     
for(int num = 0;num< jTable1.getColumnCount()  ;num++)
{
    jTable1.setValueAt(data[arrayList][num], counter, num);

}
counter++;
arrayList++;
}
   
}
protected void clearData(){
    int value = Integer.parseInt(totalStdText.getText());
       totalAmt.setText("");
   totPaidAmt.setText("");
totUnpaidAmt.setText("");
totalStdText.setText("0");

    for(int count = 0;count<value;count++)
    {
((DefaultTableModel)jTable1.getModel()).removeRow(count);
}
}
protected void setTableData(String data[][],String name)
{
//set data in the table
//int row = Integer.parseInt(data[data.length-1]);

jTable1.setValueAt(data[0][0],rowCounter-1,0);
jTable1.setValueAt(data[0][2],rowCounter-1,19);
jTable1.setValueAt(data[0][3],rowCounter-1,20);
jTable1.setValueAt(data[0][4],rowCounter-1,21);


//jTable1.setValueAt(data[0][1],rowCounter-1,0);

for(int index = 1;index<3;index++){
for(int count = 0;data[index][count]!= null;count++){
if(index == 1){
tableVal(data[index][count],"yes");
}
else{
tableVal(data[index][count],"no");
}
}

}
}
private void tableVal(String value,String status){
String[] months = new DateFormatSymbols().getMonths();
for(int month = 0;month<12;month++)
{
if(months[month]==value)
{
jTable1.setValueAt(status, rowCounter-1, month+4);
}
}

}

protected String[] getTableData(){
String[] tableData = new String[24]; 
int count;
String amount;
for( count = 0;count<jTable1.getColumnCount();count++)
    tableData[count+2] = (String) jTable1.getValueAt(rowCounter,count);
   
tableData[0] = (String) comboDar.getSelectedItem().toString();
tableData[1] = (String) comboMoh.getSelectedItem().toString();
 
   rowCounter++;
return tableData;
}
protected void removeRow(){

counter = 0;
}
protected String[] searchRec(String regId){
    
   Object obj = null;
   int num = 0,count = 0;
   while( jTable1.getValueAt(num,1)!=obj && num<jTable1.getRowCount())
   {    
        num++;
   }
   
    String[] searchRec = new String[24];
    for(int rowCount = 0;rowCount<num;rowCount++)
    {
    if(regId.equals((String)jTable1.getValueAt(rowCount,0)) )
    {
        for(count = 0;count<jTable1.getColumnCount();count++){
        searchRec[count+2] = (String)jTable1.getValueAt(rowCount,count);
    }
    }
    }
searchRec[0] = (String) comboDar.getSelectedItem().toString();
searchRec[1] = (String) comboMoh.getSelectedItem().toString();

return searchRec;
}
void searchListener(java.awt.event.ActionListener evt){
    
search.addActionListener(evt);
//adding a listener whose value will be given in the controller class
}
void insertListener(java.awt.event.ActionListener evt){
Insert.addActionListener(evt);
//adding a listener whose value will be given in the controller class
}
void addComboDarListener(java.awt.event.ActionListener evt){
comboDar.addActionListener(evt);
//adding a listener whose value will be given in the controller class
}
void addComboMohListener(java.awt.event.ActionListener evt){
comboMoh.addActionListener(evt);
//adding a listener whose value will be given in the controller class
}
void closeListener(java.awt.event.ActionListener evt){
    
Close.addActionListener(evt);
//adding a listener whose value will be given in the controller class
}
    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
 // TODO add your handling code here:
    }//GEN-LAST:event_printActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed

        Insert.setEnabled(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_searchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TotalFee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TotalFee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TotalFee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TotalFee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                       TotalFeeController controller = TotalFeeController.getInstance() ;
            }
        });
    }
    
    public String comboDarValue[] = new String[2];
    private static int counter = 0,rowCounter = 0;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Close;
    private javax.swing.JButton Insert;
    private javax.swing.JComboBox comboDar;
    private javax.swing.JComboBox comboMoh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton print;
    private javax.swing.JButton search;
    private javax.swing.JTextField totPaidAmt;
    private javax.swing.JTextField totUnpaidAmt;
    private javax.swing.JTextField totalAmt;
    private javax.swing.JTextField totalStdText;
    // End of variables declaration//GEN-END:variables
}
